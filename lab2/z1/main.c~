
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>


int main(int argc, char** argv){

  if( argc < 4 ){
    printf("Not enough args\n");
    return 10;
  }
  int task;
  if( strcmp( argv[1], "generate" ) == 0 ){
    task = 0;
  } else if ( strcmp( argv[1], "sort") == 0 ){
    task = 1;
  } else if ( strcmp( argv[1], "copy") == 0 ){
    task = 2;
  } else {
    printf("Unrecognized option: %s\n", argv[1]);
    return 2;
  }


  int i = 2;
  char* source = argv[i];
  if( task == 2 ){
    char* target = argv[++i];
  }
  int records = strtol(argv[++i], NULL, 10);
  int record_length = strtol(argv[++i], NULL, 10);
  int method = 0;
  if( task != 0 ){
    method = ( strcmp(argv[++i], "sys") == 0 ) ? 0 : 1;
  }
  // 0 oznacza read write
  // 1 oznacza fread fwrite 

  if( task == 0 ){ // generate 

    FILE* randomIn = fopen("/dev/urandom", "r");
    if(randomIn == NULL){
      printf("Error at open(\"dev/urandom\")\n");
      return 1;
    }
    char* buf = malloc(record_length);

    FILE* f = fopen(source, "w");
    for(int i = 0; i < records; i++){
      fread(buf, sizeof(char), record_length, randomIn);
      fwrite(buf, sizeof(char), record_length, f);
    }

    fclose(randomIn);
    fclose(f);

  } else if ( task == 1 ){ // sort

    if( method == 1 ){
      FILE* f = fopen(source, "rw");
      // jestesmy na poczatku pliku
      // pierwszy odczyt powinien zostac wykonany na drugim ( indeks 1 ) rekordzie
      if( fseek(f, record_length, 0) != 0){
	printf("fseek failed\n");
	return 1;
      }
      
      for(int i = 1; i < records; i++){
	unsigned char* key;
	int read = fread(key, sizeof(unsigned char), 1, f);
	if( read == 0 ){
	  printf("fread error\n");
	  return 2;
	}
	printf("%s ", key);
      }
      printf("\n");

    } else {

    }
		
		
		

  } else { // copy

  }



  return 0;
}
